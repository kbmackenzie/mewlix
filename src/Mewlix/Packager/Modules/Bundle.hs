{-# LANGUAGE OverloadedStrings #-}

module Mewlix.Packager.Modules.Bundle
( bundleModules
) where

import Mewlix.Packager.Type
    ( Packager
    , throwError
    , catchError
    )
import Mewlix.Packager.Config (ProjectConfig(..))
import Mewlix.Packager.Modules.Compile (compileModules)
import Mewlix.Packager.Environment (moduleFolder)
import System.IO (IOMode(..), openFile, hClose)
import System.FilePath ((</>))
import Mewlix.Utils.IO (safelyRun, createDirectory)
import Data.Text (Text)
import qualified Data.Text as Text
import qualified Data.Text.IO as TextIO

metaComment :: Text
metaComment = Text.intercalate "\n"
    [ "/*     Auto-generated by the Mewlix compiler"
    , " * > https://www.github.com/kbmackenzie/mewlix < */" ]

-- Compile and bundle all modules into a single .js file.
-- It's simpler this way!
bundleModules :: ProjectConfig -> Packager ()
bundleModules config = do
    let path = moduleFolder </> "yarnball.js"
    
    createDirectory False moduleFolder
    handle <- do
        let context = "couldn't open file " ++ show path
        safelyRun (openFile path WriteMode) context

    let write :: Text -> Packager ()
        write text = do
            let context = "couldn't write to file handle for " ++ show path
            safelyRun (TextIO.hPutStr handle text) context

    write metaComment 
    write "\n\n"

    let close :: Packager ()
        close = do
            let context = "couldn't close file handle for " ++ show path
            safelyRun (hClose handle) context

    let compile :: Packager () 
        compile = compileModules config handle >> close

    let closeOnError :: String -> Packager ()
        closeOnError e = close >> throwError e

    compile `catchError` closeOnError 
